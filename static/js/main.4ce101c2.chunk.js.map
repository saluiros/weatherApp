{"version":3,"sources":["components/Header.js","components/SearchCity.js","components/Weather.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","SearchForm","props","onSubmit","citySubmit","type","placeholder","value","cityValue","onChange","cityInput","Weather","_props$currentWeather","currentWeather","city","temperature","clouds","pressure","sunrise","sunset","wind","humidity","error","viewWeatherContent","sunriseTime","Date","toLocaleTimeString","sunsetTime","concat","Footer","apiKey","App","state","date","handleCityInput","event","_this","setState","target","handleCitySubmit","preventDefault","apiURL","fetch","then","resp","ok","Error","json","result","dateTime","toLocaleString","changeState","main","temp","sys","speed","all","catch","console","log","components_Header","SearchCity","this","components_Weather","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAQeA,EANA,WACX,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAASH,EAAAC,EAAAC,cAAA,gECapBE,EAfI,SAAAC,GACf,OACIL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMI,SAAUD,EAAME,YAClBP,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OACRC,YAAY,eACZC,MAAOL,EAAMM,UACbC,SAAUP,EAAMQ,YAEpBb,EAAAC,EAAAC,cAAA,6BCwBDY,EAjCC,SAAAT,GAAS,IAAAU,EAEmEV,EAAMW,eAAtFC,EAFaF,EAEbE,KAAMC,EAFOH,EAEPG,YAAaC,EAFNJ,EAEMI,OAAQC,EAFdL,EAEcK,SAAUC,EAFxBN,EAEwBM,QAASC,EAFjCP,EAEiCO,OAAQC,EAFzCR,EAEyCQ,KAAMC,EAF/CT,EAE+CS,SAAUC,EAFzDV,EAEyDU,MAC1EC,EAAqB,KAEzB,IAAKD,GAASR,EAAM,CAIhB,IAAMU,EAAc,IAAIC,KAAe,IAAVP,GAAgBQ,qBACvCC,EAAa,IAAIF,KAAc,IAATN,GAAeO,qBAC3CH,EACI1B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKe,GACLjB,EAAAC,EAAAC,cAAA,yBAAiBgB,EAAjB,UACAlB,EAAAC,EAAAC,cAAA,0BAAkBiB,EAAlB,KACAnB,EAAAC,EAAAC,cAAA,4BAAekB,EAAf,QACApB,EAAAC,EAAAC,cAAA,wCAAmByB,GACnB3B,EAAAC,EAAAC,cAAA,wCAAmB4B,GACnB9B,EAAAC,EAAAC,cAAA,4CAAqBqB,EAArB,QACAvB,EAAAC,EAAAC,cAAA,kCAAgBsB,EAAhB,MAKZ,OACIxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVsB,EAAK,qEAAAM,OAAyDd,GAASS,ICnBrEM,SARA,WACX,OACIhC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,0DCEN+B,EAAS,mCAqFAC,6MA7EbC,MAAQ,CACNxB,UAAW,GACXM,KAAM,GACNQ,OAAO,EACPW,KAAM,GACNlB,YAAa,GACbG,QAAS,GACTC,OAAQ,GACRF,SAAU,GACVG,KAAM,GACNJ,OAAQ,GACRK,SAAU,MAMZa,gBAAkB,SAAAC,GAChBC,EAAKC,SAAS,CACZ7B,UAAW2B,EAAMG,OAAO/B,WAI5BgC,iBAAmB,SAAAJ,GACjBA,EAAMK,iBAON,IAAMC,EAAM,qDAAAb,OAAwDQ,EAAKJ,MAAMxB,UAAnE,WAAAoB,OAAsFE,EAAtF,iBAEZY,MAAMD,GACHE,KAAK,SAAAC,GACJ,GAAIA,EAAKC,GACP,OAAOD,EAET,MAAME,MAAM,sEAEbH,KAAK,SAAAC,GAAI,OAAIA,EAAKG,SAClBJ,KAAK,SAAAK,GACJ,IAAMC,GAAW,IAAIxB,MAAOyB,eAC5Bd,EAAKC,SAAS,SAAAc,GAAW,MAAK,CAC5B7B,OAAO,EACPW,KAAMgB,EACNlC,YAAaiC,EAAOI,KAAKC,KACzBnC,QAAS8B,EAAOM,IAAIpC,QACpBC,OAAQ6B,EAAOM,IAAInC,OACnBF,SAAU+B,EAAOI,KAAKnC,SACtBG,KAAM4B,EAAO5B,KAAKmC,MAClBvC,OAAQgC,EAAOhC,OAAOwC,IACtBnC,SAAU2B,EAAOI,KAAK/B,SACtBP,KAAMqC,EAAY3C,eAGrBiD,MAAM,SAAAnC,GACLoC,QAAQC,IAAIrC,GACZc,EAAKC,SAAS,SAAAc,GAAW,MAAK,CAC5B7B,OAAO,EACPR,KAAMqC,EAAY3C,wFAMxB,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC6D,EAAD,MACA/D,EAAAC,EAAAC,cAAC8D,EAAD,CAAYrD,UAAWsD,KAAK9B,MAAMxB,UAAWE,UAAWoD,KAAK5B,gBAAiB9B,WAAY0D,KAAKvB,mBAC/F1C,EAAAC,EAAAC,cAACgE,EAAD,CAASlD,eAAgBiD,KAAK9B,QAC9BnC,EAAAC,EAAAC,cAACiE,EAAD,cA7EUC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.4ce101c2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\"><h1>Sprawdź pogodę w wybranym mieście</h1></header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst SearchForm = props => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.citySubmit}>\r\n                <input type=\"text\"\r\n                    placeholder=\"Wpisz miasto\"\r\n                    value={props.cityValue}\r\n                    onChange={props.cityInput}\r\n                />\r\n                <button>Wyszukaj</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchForm;","import React from 'react';\r\n\r\nconst Weather = props => {\r\n    /* Destrukturyzuję dane, żeby łatwiej ich używać */\r\n    const { city, temperature, clouds, pressure, sunrise, sunset, wind, humidity, error } = props.currentWeather;\r\n    let viewWeatherContent = null;\r\n\r\n    if (!error && city) {\r\n        /* Zamieniam na czytelną godzinę wschód i zachód słońca, ponieważ pobierana jest w sekundach od 1 stycznia 1970 roku. \r\n        Mnożę przez 1000, ponieważ zwracany z api obiekt nie zawiera ms, \r\n        które przetwarza użyta metoda (bez pomnożenia godzina byłaby nieprawidłowa) */\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n        viewWeatherContent = (\r\n            <div>\r\n                <h2>{city}</h2>\r\n                <p>Temperatura: {temperature} &#176;C</p>\r\n                <p>Zachmurzenie: {clouds}%</p>\r\n                <p>Ciśnienie: {pressure} hPa</p>\r\n                <p>Wschód słońca: {sunriseTime}</p>\r\n                <p>Zachód słońca: {sunsetTime}</p>\r\n                <p>Prędkość wiatru: {wind} m/s</p>\r\n                <p>Wilgotność: {humidity}%</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"weather\">\r\n            {error ? `Nie udało się pobrać pogody dla wskazanego miasta: ${city}` : viewWeatherContent}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <p>Aplikacja wykonana na potrzeby rekrutacji.</p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Header from './Header';\nimport SearchCity from './SearchCity';\nimport Weather from './Weather';\nimport './App.css';\nimport Footer from './Footer';\n\nconst apiKey = 'ef8b35e069be23929dddca3df9e09120';\n\nclass App extends Component {\n  /* Stan do pobierania wartości dla pogody w danym mieście.\n    city przechowuje wrtość wpisaną do formularza\n    pozostałe właściwości pobierane są przez fetch z Api Open Weather Map\n    error będzie wskazywał czy otrzymaliśmy wyniki z fetch\n  */\n  state = {\n    cityValue: '',\n    city: '',\n    error: false,\n    date: '',\n    temperature: '',\n    sunrise: '',\n    sunset: '',\n    pressure: '',\n    wind: '',\n    clouds: '',\n    humidity: ''\n  };\n\n\n\n  /* Pobieranie wartości wpisywanej do inputa jako state.city */\n  handleCityInput = event => {\n    this.setState({\n      cityValue: event.target.value\n    })\n  };\n\n  handleCitySubmit = event => {\n    event.preventDefault();\n    /* Pobieram dane na podstawie tworzonego url, fetch tworzy obietnicę (promiss).\n    Rozstrzygnięciem obietnicy może być jej spełnienie lub odrzucenie. \n    Spełnienie oznacza zwrot wyników, czyli wszystko poszło poprawnie (co nie oznacza, że otrzymaliśmy oczekiwany wynik).\n    Odrzucenie natomiast kiedy coś poszło niepoprawnie np. błąd w adresie api.  \n    Za pomocą ten tworzymy łańcuch, napierw sprawdzam czy przyszła odpowiedź i zwracam dane, potem wyciągam z body jsona.\n    W kolejnym then pracuję juz na wynikach.*/\n    const apiURL = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.cityValue}&appid=${apiKey}&units=metric`;\n\n    fetch(apiURL)\n      .then(resp => {\n        if (resp.ok) {\n          return resp\n        }\n        throw Error(\"Nie udało się pobrać pogody dla wskazanego miasta\")\n      })\n      .then(resp => resp.json())\n      .then(result => {\n        const dateTime = new Date().toLocaleString;\n        this.setState(changeState => ({\n          error: false,\n          date: dateTime,\n          temperature: result.main.temp,\n          sunrise: result.sys.sunrise,\n          sunset: result.sys.sunset,\n          pressure: result.main.pressure,\n          wind: result.wind.speed,\n          clouds: result.clouds.all,\n          humidity: result.main.humidity,\n          city: changeState.cityValue\n        }))\n      })\n      .catch(error => {\n        console.log(error);\n        this.setState(changeState => ({\n          error: true,\n          city: changeState.cityValue\n        }))\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <SearchCity cityValue={this.state.cityValue} cityInput={this.handleCityInput} citySubmit={this.handleCitySubmit} />\n        <Weather currentWeather={this.state} />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}